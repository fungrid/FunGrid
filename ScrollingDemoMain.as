package  {		import flash.display.MovieClip;	import no.agens.fungrid.FunGrid;	import flash.geom.Rectangle;	import flash.events.Event;	import no.agens.fungrid.GameObject;	import no.agens.fungrid.RepeatSettings;	import flash.geom.Point;			public class ScrollingDemoMain extends MovieClip {				var funGrid:FunGrid;				var chopper:GameObject;		public function ScrollingDemoMain() {						// Create FunGrid and define viewport			funGrid = new FunGrid(this, new Rectangle(0,0,550,400));						// Add background:			// scrollFactor.x = 0 - no horisontal scrolling, scrollFactor.x = 0.2 - slow vertical scrolling			funGrid.addGameObject(new GameObject("background", new BackgroundMovieClip(),new Point(0,0),new Point(0,0.2)));						// Add two horisontal repeating palms			funGrid.addGameObject(new GameObject("palm", new PalmMovieClip(),new Point(0,480),new Point(0.2,0.2),true,new RepeatSettings(710)));			funGrid.addGameObject(new GameObject("palm", new PalmMovieClip(),new Point(400,510),new Point(0.2,0.2),true,new RepeatSettings(800)));						// Add two horisontal repeating clouds:			funGrid.addGameObject(new GameObject("cloud1", new CloudMovieClip(),new Point(200,600),new Point(1,1),true,new RepeatSettings(700)));			funGrid.addGameObject(new GameObject("cloud2", new CloudMovieClip(),new Point(500,800),new Point(1,1),true,new RepeatSettings(800)));						// Create a chopper GameObject:			chopper = new GameObject("chopper", new ChopperMovieClip(), new Point(300,550));			// Give x speed to the chopper:			chopper.speed.x = 10;			// Add the chopper to funGrid:			funGrid.addGameObject(chopper);						// Move the viewport so the chopper is in the center:			funGrid.moveViewportCenter(chopper.pos.x, chopper.pos.y);						// Call gameLoop on every frame			addEventListener(Event.ENTER_FRAME, gameLoop);		}		// Updates on every frame		private function gameLoop(e:Event):void {			// Change the y speed of the chopper with a Sine function			chopper.speed.y = 5*Math.sin(funGrid.updateCounter/40);			// Adjust the rotation to the speed direction			chopper.displayObject.rotation = Math.atan2(chopper.speed.y, chopper.speed.x)*180/Math.PI;			// Let the viewport follow the chopper:			funGrid.setFutureViewportCenter(chopper.pos.x,chopper.pos.y);			// Update FunGrid			funGrid.update();		}	}	}