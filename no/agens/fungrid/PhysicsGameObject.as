package no.agens.fungrid{	import flash.display.Sprite;	import flash.geom.Point;	import flash.geom.Rectangle;	/*	Copyright (c) 2011, Agens AS <post@agens.no> http://agens.no		Permission to use, copy, modify, and/or distribute this software for any	purpose with or without fee is hereby granted, provided that the above	copyright notice and this permission notice appear in all copies.		THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES	WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF	MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR	ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES	WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN	ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF	OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.	*/	/**	 * <h1>PhysicsGameObject</h1>	 * <p>GameObject on the FunGrid with some simple physics. Will interact with PolyLineGameObject platforms</p>	 * 	 * @author Peter Måseide, Agens AS	 * @date 21. mar. 2011	 */	public class PhysicsGameObject extends GameObject {		/** The PGO can be "grounded" on a PolyLineGameObject platform. When plgo is null we are free falling */		public var plgo:PolyLineGameObject;		/** Defines where on a PolyLineGameObject the PGO is located. The value is between 0 and the length of the PolyLine */		public var parameter:Number;		/** The speed we are moving on the PLGO */		public var parameterSpeed:Number;		/**		 * Constructor 		 * @param id A string you can use to identify the PGO		 * @param sprite The visual part of the PGO. Is added to baseSprite on FunGrid when PGO is added to the FunGrid		 * @param pos Positon for the PGO on the FunGrid		 * @param startPolyLineGameObject If we want the PGO to start on a PGO		 * @param parameter Defines where on a PolyLineGameObject the PGO is located. The value is between 0 and the length of the PolyLine		 * @param parameterSpeed The speed we are moving on the PLGO		 * 		 */				public function PhysicsGameObject(id:String,sprite:Sprite,pos:Point,startPolyLineGameObject:PolyLineGameObject=null, parameter:Number=0, parameterSpeed:Number=0) {			super(id,sprite,pos,null,true);			plgo = startPolyLineGameObject;			this.parameter = parameter;			this.parameterSpeed = parameterSpeed;		}		/**		 * Position updates to the object when it's not grounded on a plgo platform		 * 		 */				protected function updateGridPositionOffPlgo():void {			speed.x +=  acc.x;			speed.y +=  acc.y;			var c:PolyLineCollision = fg.polyLineCollision(new Point(pos.x,pos.y),new Point(pos.x + speed.x,pos.y + speed.y));			if (c && speed.y > 0) {				// Collision with a PLGO platform				plgo = c.plgo;				parameter = c.parameter;				pos.x = c.point.x;				pos.y = c.point.y;				plgoCollision();			} else {				// No collision with a PLGO platform				pos.x +=  speed.x;				pos.y +=  speed.y;			}		}		/**		 * Custom actions when colliding with a PLGO 		 * 		 */				protected function plgoCollision():void {		}		/**		 * Custom actions when colliding when falling of the edges of the plgo		 * 		 */			protected function offPlgo():void {					}		/**		 * Position updates to the object when it's grounded on a plgo platform		 * 		 */			protected function updateGridPositionOnPlgo():void {			parameter +=  parameterSpeed;			var p:Point = plgo.pointFromParameter(parameter);			if (p) {				pos.x = p.x;				pos.y = p.y;			} else {				// Off the plgo platform				if (parameter < 0 && plgo.left) {					// Continue on the plgo platform to the left					plgo = plgo.left;					parameter +=  plgo.polyLine.totalLength;					p = plgo.pointFromParameter(parameter);					if (p) {						pos.x = p.x;						pos.y = p.y;					}				} else if (parameter>plgo.polyLine.totalLength && plgo.right) {					// Continue on the plgo platform to the right					parameter -=  plgo.polyLine.totalLength;					plgo = plgo.right;					p = plgo.pointFromParameter(parameter);					if (p) {						pos.x = p.x;						pos.y = p.y;					}				} else {					// New position outside the plgo platform					p = plgo.pointFromParameter(parameter,true);					// New speed					speed.x = p.x - pos.x;					speed.y = p.y - pos.y;					plgo = null;					pos.x +=  speed.x;					pos.y +=  speed.y;					offPlgo();				}			}		}		/** Updates the positon on the grid */		override protected function updateGridPosition():void {			if (plgo) {				updateGridPositionOnPlgo();			} else {				updateGridPositionOffPlgo();			}		}	}}