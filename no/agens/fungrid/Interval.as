package no.agens.fungrid {	public class Interval {		private var _min:Number;		private var _max:Number;		public var length:Number;		public function Interval(min:Number, max:Number) {			_min = min;			_max = max;			calculateLength();		}		public function get min():Number {			return _min;		}		public function set min(newMin:Number):void {			_min = newMin;			calculateLength();		}		public function get max():Number {			return _max;		}		public function set max(newMax:Number):void {			_max = newMax;			calculateLength();		}		public function contains(n:Number):Boolean {			if (n>=_min && n<=_max) {				return true;			}			return false;		}		public function isUnder(n:Number):Boolean {			if (n<_min) {				return true;			}			return false;		}		public function isOver(n:Number):Boolean {			if (n>_max) {				return true;			}			return false;		}		public function forceIntoInterval(n:Number):Number {			if (n>_max) {				return _max;			} else if (n<_min) {				return _min;			}			return n;		}		private function calculateLength():void {			length = _max-_min;		}	}	}