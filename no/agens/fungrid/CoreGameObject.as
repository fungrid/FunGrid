package no.agens.fungrid {	import flash.display.DisplayObject;	import flash.geom.Point;	/*	Copyright (c) 2011, Agens AS <post@agens.no> http://agens.no		Permission to use, copy, modify, and/or distribute this software for any	purpose with or without fee is hereby granted, provided that the above	copyright notice and this permission notice appear in all copies.		THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES	WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF	MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR	ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES	WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN	ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF	OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.	*/	/**	 * <h1>CoreGameObject</h1>	 * <p>The mother of all GameObjects. Basic functionality.</p>	 * 	 * Usgae: Create CoreGameObjects and add them to the FunGrid!	 * You may use CoreGameObject if you don't need the functionality of the GameObject.	 * 	 * @author Peter Måseide, Agens AS	 * @date 4. may 2011	 */	public class CoreGameObject extends HardCoreGameObject {		/** True if this GO is supposed to move on the GameGrid with speed/acceleration */		public var moveable:Boolean;		/** x and y speed of the GO on the GameGrid. Measured in pixels pr update (frame). */		public var speed:Point;		/** x and y acceleration of the GO on the GameGrid. Measures change in speed in pixels pr update (frame). */		public var acceleration:Point;				/** Interval defining min and max for speed.x */		public var speedIntervalX:Interval;		/** Interval defining min and max for speed.y */		public var speedIntervalY:Interval;		/** speed.x is multiplied with this Number on each update. */		public var speedChangeFactorX:Number = 1;		/** speed.y is multiplied with this Number on each update. */		public var speedChangeFactorY:Number = 1;				/**		 * Constructor 		 * @param id A string you can use to identify the GO		 * @param displayObject The visual part of the GameObject. Is added to baseSprite on FunGrid when GO is added to the FunGrid		 * @param initPos Positon for the GO on the FunGrid		 * @param scrollFactor How the GO follows GameGrid.baseSprite when scrolling. (Default: x:1 y:1 - Use values below 1 to scroll backgrounds slower, and values above 1 to scroll things in the foreground faster.)		 * @param moveable True if this GO is supposed to move on the GameGrid with speed/acceleration. If false the updateGridPosistion() will never run.		 * @param repeatSettings Repeat settings		 * @param initSpeed x and y speed of the GO on the GameGrid. Measured in pixels pr update (frame)		 * @param initAcceleration x and y acceleration of the GO on the GameGrid. Measures change in speed in pixels pr update (frame).		 * 		 */			public function CoreGameObject(id:String,displayObject:DisplayObject,initPos:Point,scrollFactor:Point=null, moveable:Boolean = true, initSpeed:Point=null, initAcceleration:Point=null) {			super(id,displayObject,initPos,scrollFactor);			this.moveable = moveable;			if (initSpeed==null) {				speed = new Point(0,0);			} else {				if (!moveable) {					trace("Warning - CoreGameObject id='"+id+"' : moveable is false, but it has initSpeed");				}				speed = initSpeed;			}			if (initAcceleration==null) {				acceleration = new Point(0,0);			} else {				if (!moveable) {					trace("Warning - CoreGameObject id='"+id+"' : moveable is false, but has initAcc");				}				acceleration = initAcceleration;			}		}				/** Updates the position on the grid and the DisplayObjects position in the viewport, and then render... */		override public function update():Boolean {			if (destroyMe) {				return false;			}			customEarlyUpdate();			if (moveable) {				updateSpeed();				updateGridPosition();			}			customLateUpdate();			updateRenderPositon();			render();						return true;		}		/** Updates the speed by using acceleration. */		protected function updateSpeed():void {			speed.x +=  acceleration.x;			speed.x *= speedChangeFactorX;			if (speedIntervalX) {				speed.x = speedIntervalX.forceIntoInterval(speed.x);			}			speed.y +=  acceleration.y;			speed.y *= speedChangeFactorY;			if (speedIntervalY) {				speed.y = speedIntervalY.forceIntoInterval(speed.y);			}		}		/** Updates the positon on the grid by using speed. */		protected function updateGridPosition():void {			pos.x +=  speed.x;			pos.y +=  speed.y;		}		/** Custom update after updateGridPosition */		protected function customLateUpdate():void {		}	}}