package no.agens.fungrid {	import flash.display.Sprite;	import flash.geom.Point;	import flash.geom.Rectangle;	/*	Copyright (c) 2011, Agens AS <post@agens.no> http://agens.no		Permission to use, copy, modify, and/or distribute this software for any	purpose with or without fee is hereby granted, provided that the above	copyright notice and this permission notice appear in all copies.		THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES	WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF	MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR	ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES	WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN	ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF	OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.	*/	/**	 * <h1>HardCoreGameObject</h1>	 * <p>The grandmother of all GameObjects! Only essential functionality.</p>	 * 	 * Usgae: Create HardCoreGameObjects and add them to the FunGrid!	 * You may use HardCoreGameObject if you don't need the functionality of the CoreGameObject.	 * 	 * @author Peter Måseide, Agens AS	 * @date 4. may. 2011	 */	public class HardCoreGameObject {		/** A string you can use to identify the GO */		public var id:String;		/** Reference to the FunGrid the GO is added on */		public var fg:FunGrid;		/** The visual part of the GameObject. Is added to baseSprite on FunGrid when GO is added to the FunGrid */		public var sprite:Sprite;		/** Positon for the GO on the FunGrid*/		public var pos:Point;		/** How the GO follows GameGrid.baseSprite when scrolling. (Default: x:1 y:1 - Use values below 1 to scroll backgrounds slower, and values above 1 to scroll things in the foreground faster.) */		public var scrollFactor:Point;		/** BoundingRectangle for the visible part of the Sprite*/		public var boundRect:Rectangle;		/** Reference to the baseSprite on the FunGrid */		public var baseSprite:Sprite;		/** True if we want to render the Sprite even if it's outside the GameGrid viewport */		public var neverHide:Boolean = false;		/** True if the GO is supposed to be removed from the GameGrid */		public var destroyMe:Boolean = false;				/**		 * Constructor 		 * @param id A string you can use to identify the GO		 * @param sprite The visual part of the GameObject. Is added to baseSprite on FunGrid when GO is added to the FunGrid		 * @param initPos Positon for the GO on the FunGrid		 * @param scrollFactor How the GO follows GameGrid.baseSprite when scrolling. (Default: x:1 y:1 - Use values below 1 to scroll backgrounds slower, and values above 1 to scroll things in the foreground faster.)		 * 		 */				public function HardCoreGameObject(id:String,sprite:Sprite,initPos:Point,scrollFactor:Point=null) {			this.id = id;			this.sprite = sprite;			if (sprite) {				sprite.x = -sprite.width*2;				sprite.y = -sprite.height*2;			}			boundRect = sprite.getBounds(sprite);			if (scrollFactor == null) {				this.scrollFactor = new Point(1,1);			} else {				this.scrollFactor = scrollFactor;			}			pos = new Point(initPos.x/this.scrollFactor.x,initPos.y/this.scrollFactor.y);		}				/** Updates the position on the grid and the Sprites position in the viewport, and then render... */		public function update():Boolean {			if (destroyMe) {				return false;			}			customEarlyUpdate();			updateViewportPositon();			render();						return true;		}		/** Custom update before anything else is updated */		protected function customEarlyUpdate():void {		}		/** Shows the sprite if the sprite is inside the viewport */		protected function render():void {			if (sprite) {				if (neverHide) {					customRender();					sprite.visible = true;				} else if (inViewport()) {					customRender();					sprite.visible = true;				} else {					sprite.visible = false;				}			}		}		/** Custom render */		protected function customRender():void {		}		/**		 * Used by the FunGrid when adding the GO.		 * @param fg FunGrid		 * @param baseSprite FunGrid baseSprite		 * 		 */				public function setFunGrid(fg:FunGrid,baseSprite:Sprite):void {			this.fg = fg;			this.baseSprite = baseSprite;		}		/** Updates the position of the sprite in the viewport */		public function updateViewportPositon():void {			if (sprite) {				if (scrollFactor.x != 0) {					sprite.x=scrollFactor.x*(pos.x-fg.viewport.x);				} else {					sprite.x = pos.x;				}				if (scrollFactor.y != 0) {					sprite.y=scrollFactor.y*(pos.y-fg.viewport.y);				} else {					sprite.y = pos.y;				}			}		}		/** If sprite is inside the viewport */		public function inViewport():Boolean {			return boundRect.x+sprite.x<=fg.viewport.width/fg.parentSprite.scaleX&&boundRect.right+sprite.x>=0&&boundRect.top+sprite.y<=fg.viewport.height/fg.parentSprite.scaleY&&boundRect.bottom+sprite.y>=0;		}		/** Make it possible for FunGrid to remove this GameObject */		public function pleaseDestroy():void {			destroyMe = true;			sprite.visible = false;		}		/** Used by the FunGrid when destroying the GO. */		public function destroy():void {			customDestroy();			if (baseSprite) {				baseSprite.removeChild(sprite);			}			sprite=null;		}		/** Custom destroy actions */		protected function customDestroy():void {		}	}}