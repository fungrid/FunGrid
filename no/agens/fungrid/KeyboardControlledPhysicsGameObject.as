package no.agens.fungrid{	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.display.Stage;	import flash.geom.Point;	import flash.ui.Keyboard;	import no.agens.fungrid.keyboard.KeyController;	/*	Copyright (c) 2011, Agens AS <post@agens.no> http://agens.no		Permission to use, copy, modify, and/or distribute this software for any	purpose with or without fee is hereby granted, provided that the above	copyright notice and this permission notice appear in all copies.		THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES	WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF	MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR	ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES	WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN	ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF	OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.	*/	/**	 * <h1>KeyboardControlledPhysicsGameObject</h1>	 * <p>PhysicsGameObject on the FunGrid with basic keyboard controls.</p>	 * 	 * @author Peter Måseide, Agens AS	 * @date 11. mar. 2011	 */	public class KeyboardControlledPhysicsGameObject extends PhysicsGameObject {		public var kc:KeyController;		public var jumpSpeedY:Number = -20;		public var leftDownSpeedX:Number = -8;		public var leftDownParameterSpeed:Number = -8;		public var rightDownSpeedX:Number = 8;		public var rightDownParameterSpeed:Number = 8;		public var alignSpriteRotationToPlatform:Boolean = true;		/** Framelabel in sprite (MovieClip) to go to if we are standing still on a plgo (platform) after moving left */		public var platformStillLeftLabel:String;		/** Framelabel in sprite (MovieClip) to go to if we are standing still on a plgo (platform) after moving right */		public var platformStillRightLabel:String;		/** Framelabel in sprite (MovieClip) to go to if we are moving left on a plgo (platform) */		public var platformMoveLeftLabel:String;		/** Framelabel in sprite (MovieClip) to go to if we are moving right on a plgo (platform) */		public var platformMoveRightLabel:String;		/** Framelabel in sprite (MovieClip) to go to if we are moving up (and right) */		public var upRightLabel:String;		/** Framelabel in sprite (MovieClip) to go to if we are moving down (and right) */		public var downRightLabel:String;		/** Framelabel in sprite (MovieClip) to go to if we are moving up (and left) */		public var upLeftLabel:String;		/** Framelabel in sprite (MovieClip) to go to if we are moving down (and right) */		public var downLeftLabel:String;		public var lastMoveWasRight:Boolean = false;		/**		 * Constructor		 * @param focusStage Reference to the stage with focus for keyboard inputs		 * @param id A string you can use to identify GameObjects		 * @param sprite The visual part of the GameObject. Is added to baseSprite on FunGrid when GameObject is added to the FunGrid		 * @param pos Positon for the GameObject on the FunGrid		 * @param startPolyLineGameObject If we want the GameObject to start on a PolyLineGameObject		 * @param parameter Defines where on a PolyLineGameObject the GameObject is located (if we start on it). The value is between 0 and the length of the PolyLine		 * 		 */		public function KeyboardControlledPhysicsGameObject(focusStage:Stage, id:String,sprite:Sprite,initPos:Point,startPolyLineGameObject:PolyLineGameObject=null, parameter:Number=0) {			super(id,sprite,initPos,startPolyLineGameObject,parameter,0);			acceleration = new Point(0,1);			initKeyController(focusStage);		}		/**		 * Initialize the KeyController kc to listen for arrow keys		 * @param focusStage Stage		 * 		 */		protected function initKeyController(focusStage:Stage):void {			kc = new KeyController(focusStage);			kc.addDownFunction(Keyboard.UP, upDown);			kc.addUpFunction(Keyboard.UP, upUp);			 kc.addDownFunction(Keyboard.DOWN, downDown);			kc.addUpFunction(Keyboard.DOWN, downUp);			kc.addDownFunction(Keyboard.LEFT, leftDown);			kc.addUpFunction(Keyboard.LEFT, leftUp);			kc.addDownFunction(Keyboard.RIGHT, rightDown);			kc.addUpFunction(Keyboard.RIGHT, rightUp);			kc.addDownFunction(Keyboard.SPACE, spaceDown);			kc.addUpFunction(Keyboard.SPACE, spaceUp);		}		override protected function customEarlyUpdate():void {			if (plgo) {				if (alignSpriteRotationToPlatform) {					displayObject.rotation += ((180*plgo.polyLine.derivativeFromParameter(parameter)/Math.PI)-displayObject.rotation)/4;				}			} else {				displayObject.rotation -=  displayObject.rotation / 4;			}			var tempSpeedX:Number = 0;			var tempParameterSpeed:Number = 0;			if (kc.isDown(Keyboard.LEFT)) {				if (plgo) {					// If on a plgo...					tempParameterSpeed +=  leftDownParameterSpeed;				} else {					// If in air...					tempSpeedX +=  leftDownSpeedX;				}			}			if (kc.isDown(Keyboard.RIGHT)) {				if (plgo) {					// If on a plgo...					tempParameterSpeed +=  rightDownParameterSpeed;				} else {					// If in air...					tempSpeedX +=  rightDownSpeedX;				}			}			speed.x = tempSpeedX;			parameterSpeed = tempParameterSpeed;		}		protected function downDown():void {		}		protected function downUp():void {		}		protected function upUp():void {		}		protected function upDown():void {			// If the object is on a PolyLineGameObject (platform)			if (plgo) {				// Leave the object				plgo = null;				// Jump!				speed.y = jumpSpeedY;			}		}		protected function leftUp():void {		}		protected function leftDown():void {		}		protected function rightUp():void {		}		protected function rightDown():void {		}		protected function spaceUp():void {		}		protected function spaceDown():void {		}		/** Showing the right frame */		override protected function customRender():void {			var gotoLabel:String;			// If the object is on a PolyLineGameObject (platform)			if (plgo) {				if (parameterSpeed == 0) {					if (lastMoveWasRight) {						if (platformStillRightLabel) {							gotoLabel = platformStillRightLabel;						}					} else {						if (platformStillLeftLabel) {							gotoLabel = platformStillLeftLabel;						}					}				} else if (parameterSpeed>0) {					if (platformMoveRightLabel) {						gotoLabel = platformMoveRightLabel;					}					lastMoveWasRight = true;				} else {					if (platformMoveLeftLabel) {						gotoLabel = platformMoveLeftLabel;					}					lastMoveWasRight = false;				}			} else {				if (speed.x == 0) {					if (lastMoveWasRight) {						if (speed.y > 0) {							if (downRightLabel) {								gotoLabel = downRightLabel;							}						} else {							if (upRightLabel) {								gotoLabel = upRightLabel;							}						}					} else {						if (speed.y > 0) {							if (downLeftLabel) {								gotoLabel = downLeftLabel;							}						} else {							if (upLeftLabel) {								gotoLabel = upLeftLabel;							}						}					}				} else if (speed.x>0) {					if (speed.y > 0) {						if (downRightLabel) {							gotoLabel = downRightLabel;						}					} else {						if (upRightLabel) {							gotoLabel = upRightLabel;						}					}					lastMoveWasRight = true;				} else {					if (speed.y > 0) {						if (downLeftLabel) {							gotoLabel = downLeftLabel;						}					} else {						if (upLeftLabel) {							gotoLabel = upLeftLabel;						}					}					lastMoveWasRight = false;				}			}			if (gotoLabel) {				MovieClip(displayObject).gotoAndStop(gotoLabel);			}		}		/** Destroy (remove all listeners for) the KeyController kc */		override protected function customDestroy():void {			kc.destroy();		}	}}