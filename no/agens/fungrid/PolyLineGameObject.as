package no.agens.fungrid{	import flash.display.DisplayObject;	import flash.display.Sprite;	import flash.geom.Point;	/*	Copyright (c) 2011, Agens AS <post@agens.no> http://agens.no		Permission to use, copy, modify, and/or distribute this software for any	purpose with or without fee is hereby granted, provided that the above	copyright notice and this permission notice appear in all copies.		THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES	WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF	MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR	ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES	WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN	ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF	OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.	*/	/**	 * <h1>PolyLineGameObject</h1>	 * <p>GameObject on the FunGrid containing a PolyLine for collision checking. Usually used as a platform or the ground in a game. Can be linked to other PolyLineGameObjects for seamless movement between them.</p>	 * 	 * Usgae: Create and place it on the FunGrid!	 * 	 * @author Peter Måseide, Agens AS	 * @date 26. jan. 2011	 */	public class PolyLineGameObject extends GameObject {		private var fromPoint:Point;		private var toPoint:Point;		/** The polyLine */		public var polyLine:PolyLine;		/** Linked PolyLineGameObject to the left of this PLGO */		public var left:PolyLineGameObject;		/** Linked PolyLineGameObject to the right of this PLGO */		public var right:PolyLineGameObject;		/** True if we wnat to draw the line on the displayObject. Usually used for debugging */		public static var drawPolyLines:Boolean = false;		/**		 * Constructor 		 * @param id A string you can use to identify the PLGO		 * @param displayObject The visual part of the PLGO. Is added to baseSprite on FunGrid when PLGO is added to the FunGrid		 * @param pos Positon for the PLGO on the FunGrid		 * @param polyLine The Polyline		 * @param scrollFactor How the PLGO follows GameGrid.baseSprite when scrolling. (Default: x:1 y:1 - Use values below 1 to scroll backgrounds slower, and values above 1 to scroll things in the foreground faster.)		 * @param moveable True if this PLGO is supposed to move on the GameGrid with speed/acceleration		 * @param repeatSettings Repeat settings		 * @param speed x and y speed of the GO on the GameGrid. Measured in pixels pr update (frame)		 * @param acc x and y acceleration of the GO on the GameGrid. Measures change in speed in pixels pr update (frame).		 * 		 */				public function PolyLineGameObject(id:String,displayObject:DisplayObject,pos:Point,polyLine:PolyLine,scrollFactor:Point=null, moveable:Boolean = true, repeatSettings:RepeatSettings=null, speed:Point=null, acc:Point=null) {			super(id,displayObject,pos,scrollFactor,moveable, repeatSettings, speed, acc);			this.polyLine = polyLine;			if (drawPolyLines) {				if (displayObject is Sprite) {					polyLine.draw(Sprite(this.displayObject));				}			}			boundRect = boundRect.union(polyLine.boundRect);			// To avoid instantiations later:			fromPoint = new Point(0,0);			toPoint = new Point(0,0);		}		/**		 * Take a parameter (usually between 0 and 1) and returns the corresponding Point on the GameGrid.		 * @param parameter		 * @param returnPointsOutsidePolygon True if we want to return points outside the Polyline		 * @return 		 * 		 */				public function pointFromParameter(parameter:Number, returnPointsOutsideLine:Boolean = false):Point {			var p:Point = polyLine.pointFromParameter(parameter,returnPointsOutsideLine);			if (p) {				return new Point(p.x+pos.x,p.y+pos.y);			}			return null;		}		/**		 * Check if a movement from one Point to another collides with the polyLine.		 * @param from		 * @param to		 * @param checkOutsideViewport		 * @return 		 * 		 */				public function collision(from:Point, to:Point, checkOutsideViewport:Boolean = false):PolyLineCollision {			var pc:PolyLineCollision;			var p:Point;			fromPoint.x = from.x-pos.x;			fromPoint.y = from.y-pos.y;			toPoint.x = to.x-pos.x;			toPoint.y = to.y-pos.y;			if (checkOutsideViewport || inViewport()) {				if (polyLine) {					p = polyLine.collisionPoint(fromPoint,toPoint);					if (p) {						pc = new PolyLineCollision();						pc.point = new Point(p.x + pos.x,p.y + pos.y);						pc.parameter = polyLine.lastCollisionPointParameter;						pc.plgo = this;						return pc;					}					// Extra checks for moving platforms may be added. Not 100% well supported in this version.					if (moveable) {						// Nothing yet...											}				}			}			return null;		}		/** Draws the polyLine on the DisplayObject. Do it once. */		public function drawPolyLine():void {			if (displayObject is Sprite) {				polyLine.draw(Sprite(displayObject));			}		}	}}