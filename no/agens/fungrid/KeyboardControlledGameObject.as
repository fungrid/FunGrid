package no.agens.fungrid {	import flash.display.Sprite;	import flash.display.Stage;	import flash.geom.Point;	import flash.ui.Keyboard;	import no.agens.fungrid.keyboard.KeyController;		/*	Copyright (c) 2011, Agens AS <post@agens.no> http://agens.no		Permission to use, copy, modify, and/or distribute this software for any	purpose with or without fee is hereby granted, provided that the above	copyright notice and this permission notice appear in all copies.		THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES	WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF	MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR	ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES	WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN	ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF	OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.	*/	/**	 * <h1>KeyboardControlledGameObject</h1>	 * <p>GameObject on the FunGrid with basic keyboard controls.</p>	 * 	 * @author Peter Måseide, Agens AS	 * @date 11. mar. 2011	 */	public class KeyboardControlledGameObject extends GameObject {		public var kc:KeyController;		public function KeyboardControlledGameObject(focusStage:Stage, id:String,sprite:Sprite,initPos:Point) {			super(id, sprite, initPos);			initKeyController(focusStage);		}		/**		 * Initialize the KeyController kc to listen for arrow keys		 * @param focusStage Stage		 * 		 */		protected function initKeyController(focusStage:Stage):void {			kc = new KeyController(focusStage);			kc.addDownFunction(Keyboard.UP, upDown);			kc.addUpFunction(Keyboard.UP, upUp);			kc.addDownFunction(Keyboard.DOWN, downDown);			kc.addUpFunction(Keyboard.DOWN, downUp);			kc.addDownFunction(Keyboard.LEFT, leftDown);			kc.addUpFunction(Keyboard.LEFT, leftUp);			kc.addDownFunction(Keyboard.RIGHT, rightDown);			kc.addUpFunction(Keyboard.RIGHT, rightUp);			kc.addDownFunction(Keyboard.SPACE, spaceDown);			kc.addUpFunction(Keyboard.SPACE, spaceUp);		}		override protected function customEarlyUpdate():void {			if (kc.isDown(Keyboard.LEFT)) {				acceleration.x = -1;				speedChangeFactorX = 1;			} else if (kc.isDown(Keyboard.RIGHT)) {				acceleration.x = 1;				speedChangeFactorX = 1;			} else {				speedChangeFactorX = 0.9;				acceleration.x = 0;			}			if (kc.isDown(Keyboard.UP)) {				acceleration.y = -1;				speedChangeFactorY = 1;			} else if (kc.isDown(Keyboard.DOWN)) {				acceleration.y = 1;				speedChangeFactorY = 1;			} else {				speedChangeFactorY = 0.9;				acceleration.y = 0;			}		}		protected function downDown():void {		}		protected function downUp():void {		}		protected function upUp():void {		}		protected function upDown():void {		}		protected function leftUp():void {		}		protected function leftDown():void {		}		protected function rightUp():void {		}		protected function rightDown():void {		}		protected function spaceUp():void {		}		protected function spaceDown():void {		}	}	}