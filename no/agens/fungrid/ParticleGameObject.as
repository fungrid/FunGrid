package no.agens.fungrid  {	import flash.geom.Rectangle;	import flash.display.DisplayObject;	import flash.geom.Point;		public class ParticleGameObject extends CoreGameObject {		public var updateCounter:uint = 0;		public var dieAfterUpdates:uint;		public var dieOutsideOfViewport:Boolean;		public var dieOutsideOfRectangle:Rectangle;		/** Rotation speed for displayObject. Measured in degrees pr update (frame) */		public var rotationSpeed:Number = 0;				public function ParticleGameObject(id:String,displayObject:DisplayObject,initPos:Point, initSpeed:Point=null, initAcceleration:Point=null, dieAfterUpdates:uint = 0, dieOutsideOfViewport:Boolean = false, dieOutsideOfRectangle:Rectangle = null, rotationSpeed:Number = 0) {			super(id, displayObject, initPos, null, true, initSpeed, initAcceleration);			this.dieAfterUpdates = dieAfterUpdates;			this.dieOutsideOfViewport = dieOutsideOfViewport;			this.dieOutsideOfRectangle = dieOutsideOfRectangle;			this.rotationSpeed = rotationSpeed;		}		/** Updates the position on the grid and the DisplayObjects position in the viewport, and then render... */		override public function update():Boolean {			if (destroyMe) {				return false;			}			customEarlyUpdate();			if (moveable) {				updateSpeed();				updateGridPosition();			}			customLateUpdate();			updateRenderPositon();			customSuperlateUpdate();			render();						return true;		}		override protected function customEarlyUpdate():void {			updateCounter +=1;			if (dieAfterUpdates>0) {				if (updateCounter >= dieAfterUpdates) {					pleaseDestroy();				}			}		}		override protected function customLateUpdate():void {			if (dieOutsideOfRectangle) {				if (!dieOutsideOfRectangle.containsPoint(pos)) {					pleaseDestroy();				}			}		}		protected function customSuperlateUpdate():void {			displayObject.rotation += rotationSpeed;			if (dieOutsideOfViewport) {				if (!inViewport()) {					pleaseDestroy();				}			}		}	}	}