package no.agens.esound{	import flash.display.MovieClip;	import flash.media.Sound;	import flash.media.SoundChannel;	import flash.media.SoundTransform;	import flash.events.*;	public class EasySound {		public var snd:Sound;		public var isPlaying:Boolean = false;		private var mc:MovieClip = new MovieClip();		public var ch:SoundChannel;		private var frameCounter:uint = 0;		private var fadeframes:uint = 0;		private var fadeVolumeStep:Number = 0;		private var volumeFrameCounter:uint = 0;		private var volumeFrames:uint = 0;		private var volumeStep:Number = 0;		private var delayCounter:uint;		private var delay:Boolean = false;		private var framesDelay:uint;		private var delayStartTime:Number;		private var delayLoops:int;		private var delaySndTransform:SoundTransform;		public var title:String;		private var onCompleteFunction:Function;		public function EasySound(snd:Sound, title:String="") {			this.snd = snd;			ch = new SoundChannel();			if (title == "") {				this.title = snd.toString();			} else {				this.title = title;			}		}		public function play(startTime:Number = 0, loops:int = 0, sndTransform:SoundTransform = null):SoundChannel {			ch = snd.play(startTime,loops,sndTransform);			ch.addEventListener(Event.SOUND_COMPLETE, soundCompleteHandler);			isPlaying = true;			return ch;		}		public function delayAndPlay(framesDelay:uint, startTime:Number = 0, loops:int = 0, sndTransform:SoundTransform = null):void {			delayCounter = 0;			this.framesDelay = framesDelay;			delayStartTime = startTime;			delayLoops = loops;			delaySndTransform = sndTransform;			delay = true;			mc.addEventListener(Event.ENTER_FRAME, delayEnterFrame);		}		public function cancelDelayAndPlay(cancelPlay:Boolean = false, fadeFrames:uint = 0):void {			if (delay) {				mc.removeEventListener(Event.ENTER_FRAME, delayEnterFrame);				delay = false;			}			if (cancelPlay) {				if (isPlaying) {					if (fadeFrames>0) {						fadeOut(fadeFrames);					} else {						stop();					}				}			}		}		public function playOnceAndCallFunctionOnComplete(startTime:Number, sndTransform:SoundTransform, onCompleteFunction:Function):SoundChannel {			ch = play(startTime,0,sndTransform);			ch.addEventListener(Event.SOUND_COMPLETE, soundCompleteHandler);			this.onCompleteFunction = onCompleteFunction;			return ch;		}		public function stop():void {			try {				ch.stop();				ch.removeEventListener(Event.SOUND_COMPLETE, soundCompleteHandler);				onCompleteFunction = null;				isPlaying = false;			} catch (e) {				trace("Feil under EasySound.ch.stop() på lyden \""+title+"\" :"+e.message);			}		}		public function fadeOut(frames:uint):void {			fadeframes = frames;			frameCounter = 0;			fadeVolumeStep = ch.soundTransform.volume / frames;			mc.addEventListener(Event.ENTER_FRAME, fadeEnterFrame);		}		public function fadeVolume(v:Number, frames:uint):void {			volumeFrames = frames;			volumeFrameCounter = 0;			volumeStep = (ch.soundTransform.volume-v)/frames;			mc.addEventListener(Event.ENTER_FRAME, volumeEnterFrame);		}		public function setVolume(v:Number):void {			var st:SoundTransform = new SoundTransform(v);			ch.soundTransform = st;		}		private function volumeEnterFrame(e:Event):void {			volumeFrameCounter +=  1;			var st:SoundTransform = new SoundTransform(ch.soundTransform.volume - volumeStep);			ch.soundTransform = st;			if (volumeFrameCounter > volumeFrames) {				mc.removeEventListener(Event.ENTER_FRAME, volumeEnterFrame);			}		}		private function fadeEnterFrame(e:Event):void {			frameCounter +=  1;			var st:SoundTransform = new SoundTransform(ch.soundTransform.volume - fadeVolumeStep);			ch.soundTransform = st;			if (frameCounter > fadeframes || ch.soundTransform.volume <= 0) {				stop();				mc.removeEventListener(Event.ENTER_FRAME, fadeEnterFrame);			}		}		private function delayEnterFrame(e:Event):void {			delayCounter +=  1;			if (delayCounter>=framesDelay) {				delay = false;				play(delayStartTime, delayLoops, delaySndTransform);				mc.removeEventListener(Event.ENTER_FRAME, delayEnterFrame);			}		}		private function soundCompleteHandler(e:Event):void {			ch.removeEventListener(Event.SOUND_COMPLETE, soundCompleteHandler);			isPlaying = false;			if (onCompleteFunction!=null) {				onCompleteFunction.call();				onCompleteFunction = null;			}		}	}}